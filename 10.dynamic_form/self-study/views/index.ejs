<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적폼(ajax, axios, fetch)</title>

    <!-- jQuery CDN -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>

    <!-- Axios CDN -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <h1>동적폼 전송 연습하기!</h1>
    <form name="register">
      <label for="name">이름:</label>
      <input type="text" name="name" id="name" required />

      <br />
      <span>성별:</span>
      <!-- (!) 둘 중 하나만 required해도 작동함 -->
      <input type="radio" id="male" name="gender" value="남성" required />
      <label for="male">남자</label>

      <input type="radio" id="female" name="gender" value="여성" />
      <label for="female">여자</label>

      <br />
      <br />
      <button type="button" onClick="ajaxGet()">Ajax GET 제출</button>
      <button type="button" onCLick="ajaxPost()">Ajax POST 제출</button>
      <br />
      <!-- axios는 promise 반환 -> aysnc/await 가능 -->
      <button type="button" onclick="axiosGet()">Axios GET 제출</button>
      <button type="button" onclick="axiosPost()">Axios POST 제출</button>
      <br />
      <button type="button" onclick="fetchGet()">Fetch GET 제출</button>
      <button type="button" onclick="fetchPost()">Fetch POST 제출</button>

      <br />
    </form>
    <div class="result"></div>

    <script>
      const resultBox = document.querySelector('.result');

      /* 1. ajax */
      function ajaxGet() {
        //폼 선택(form의 이름이 register)
        const form = document.forms['register'];

        // console.log(form);
        // console.log(form.name);
        // console.log(form.gender.length);
        // console.log(form.gender.value);

        //button type button은 required 동작하지 않음
        // -> 유효성 검증 따로 해주기
        // if (form.name.value.trim() === '') {
        //   alert('이름을 입력해주세요');
        //   return;
        // }
        // if (form.gender.value === '') {
        //   alert('성별을 선택해주세요');
        //   return;
        // }

        // --- ajax 요청 -----
        //보낼 데이터 객체 형태로 만들기
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        /* ajax 사용 */
        $.ajax({
          type: 'get',
          url: '/ajax', // form의 action에 해당하는 곳 (어떤 주소로 api를 요청하는지)
          data: data, //우리가 만든 data를 data라는 키에 담아 서버로 넘겨줌

          //통신이 성공했을 때
          success: function (res) {
            //통신 이후에 일어날 일들
            // console.log(res);
            resultBox.textContent = `GET /ajax 요청 완료!
            ${res.name}의 성별은 ${res.gender}`;
          },

          //통신이 실패했을 때
          error: function (err) {
            console.log('err', err);
          },
        });
      }

      function ajaxPost() {
        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // get, post 둘 다 key값 동일
        $.ajax({
          type: 'post',
          url: '/ajax',
          data: data,
          // 매개변수 이름은 res, data...상관없음 -> 서버가 주는 데이터 값이 들어옴
          success: function (data) {
            console.log(data);
            resultBox.textContent = `POST /ajax 요청 완료!
                ${data.name}의 성별은 ${data.gender}`;
          },
          error: function (error) {
            console.log(error);
          },
        });
      }

      // --- axios 요청 -----
      async function axiosGet() {
        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        //유효성 검사 - checkValidity()
        //- required가 있으면 가입 여부를 검사해줌
        /*
        -  Required 속성이 없는 항목 -> 무조건 True 반환
        - required 속성이 있는 항목 ->
        : 가입을 했다면 True 반환
        : 가입을 하지 않았따면 false 반환
        */
        console.log(form.name.checkValidity());
        console.log(form.gender[0].checkValidity());

        if (!form.name.checkValidity()) {
          resultBox.innerText = '이름을 입력해주세요';
          //   resultBox.innerText = form.name.validationMessage;
          return;
        }

        if (!form.gender[0].checkValidity()) {
          resultBox.innerText = '성별을 선택해주세요';
          return;
        }

        // ----axios 요청 보내기 ------
        // 1. Promise : then ~ catch 사용 (인자: 객체{ } )
        // - get 요청일 때는 params에 담아서 요청
        // axios({
        //   method: 'get',
        //   url: '/axios',
        //   params: data,
        // })
        //   .then(function (res) {
        //     //통신에 성공했을 때
        //     console.log(res);
        //     //{name: 'sueyon', gender:'여성'} 그대로 출력되지 않음 -> console.log 확인해보기
        //     // console.log(res.data); //서버에서 준 데이터
        //     // console.log(res.status);
        //     // console.log(res.statusText);
        //     // console.log(res.headers);
        //     // console.log(res.config);

        //     resultBox.textContent = `GET /axios 요청 완료!
        //   ${res.data.name}의 성별은 ${res.data.gender}`;
        //     resultBox.style.color = 'green';
        //   })
        //   .catch(function (err) {
        //     //통신에 실패했을 때
        //     console.error('error!!!');
        //     console.error(err);
        //   });

        // 2. async-await
        // - 에러처리를 try~catch문을 사용해서 해주는 게 좋다!
        // - params 대신 query로 보내보기
        try {
          const response = await axios({
            method: 'get',
            url: `/axios?name=${data.name}&gender=${data.gender}`,
          });
          console.log('axios get', response);
          // console.log(response.data);
          const { name, gender } = response.data;
          resultBox.textContent = `${name}의 성별은 ${gender}`;
          resultBox.style.color = 'green';
        } catch (err) {
          console.error(err);
        }
      }

      async function axiosPost() {
        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const res = await axios({
            // Post는 반드시 Key값(data)에 위에서 선언한 data를 담아 보내야함
            method: 'post',
            url: '/axios',
            data: data,
          });
          console.log(res);
          console.log('실제 데이터', res.data);
          //구조분해할당
          const { name: 이름, gender: 성별 } = res.data;
          resultBox.textContent = `POST /axios 요청 완료!
          ${이름}의 성별은 ${성별}`;
          resultBox.style.color = 'hotpink';
        } catch (err) {
          console.log(err);
        }
      }

      // --- fetch 요청 ------
      function fetchGet() {
        const form = document.forms['register'];
        // console.log('---fetchGet', form);
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        //fetch ('URL', 설정값(데이터, 함수)
        // fetch('/fetch', {
        //   method: 'get', //통신하고자하는 방식
        // });

        //fetch의 default method: GET
        fetch(`/fetch?name=${data.name}&gender=${data.gender}`)
          .then((res) => {
            console.log(res);
            //서버에서 넘어온 문자열 뽑아내기 위해 text() 메서드 사용
            //text(): res 객체에서 텍스트 본문을 뽑아내기 위해/ 응답을 읽고 텍스트를 반환
            // return res.text(); //res.send('응답완료')

            //json(); 객체에서 본문을 뽑아내기 위해 - 응답을 JSON 형태로 파싱(실제로 확인해보면 Javascript 객체 형태로 반환
            return res.json(); //응답 본문을 JSON에서 JS 객체로 반환
          })
          .then((res) => {
            console.log(res);
            resultBox.textContent = `GET /fetch 요청 완료! ${res.name}의 성별은 ${res.gender}`;
            resultBox.style.color = 'limegreen';
          })
          .catch((err) => {
            console.error('err', err);
          });
      }

      async function fetchPost() {
        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        //데이터 요청 작업 (HTTP 요청을 보낼 수 있는 API :fetch(경로, 요청 내용))
        try {
          const res = await fetch('/fetch', {
            method: 'post',
            body: JSON.stringify(data), //데이터(JS객체)->JSON 문자열로 변환해서 서버로 전송 : 서버는 이 데이터를 JSON으로 파싱해야함
            headers: {
              'Content-Type': 'application/json', //요청헤더: JSON 데이터임을 명시
            },
          });
          console.log('fetchPost', res); //fetch가 반환하는 Response 객체 (=HTTP 응답 전체)

          //json(), text() : 시간 걸리는 작업
          const result = await res.json(); //JSON -> 객체
          console.log('res.json', result); //{name: '산타', gender: '남성'}
          const { name, gender } = result;
          resultBox.textContent = `
          POST /fetch 요청 결과:
          ${name}의 성별은 ${gender}`;
          resultBox.style.color = 'gray';
        } catch (err) {
          console.error(err);
        }
      }
    </script>
  </body>
</html>
