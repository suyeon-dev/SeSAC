<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>socket.io Emit, On 기본</title>
    <!-- socket.io CDN -->
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <ul></ul>

    <form id="chat">
      <input type="text" id="user" placeholder="사용자명" />
      <input type="text" id="message" placeholder="채팅 내용" />
      <button type="submit">보내기</button>
    </form>

    <script>
      // io() 함수가 소켓 생성 및 연결 설정
      const socket = io();

      /* --------- 🧐 on과 emit 사용해보기] ------- */
      // 1. client > server > client
      // 이벤트 발생시키는 중, server로 데이터 전달
      // cb : emit -> on -> emit 서버가 나에게 주는 데이터 받기 위함
      socket.emit(
        'event_name',
        'hello',
        10,
        { name: 'suyeon' },
        (res1, res2, res3) => {
          console.log(res1, res2, res3);
        }
      );

      // 2. 데이터를 받아주는 cb이 없을 때
      socket.emit('cb_test', '안녕하세요!');

      // 3-1. server > client, 클라이언트 전체에게
      socket.on('entire_client', (msg) => {
        console.log('entire_client:', msg);
      });

      // 3-2. server > client, 클라이언트 하나에게
      socket.on(
        'one_client',
        (msg) => {
          console.log('one_client:', msg);
        },
        (arg) => {
          console.log(arg);
        }
      );

      // ------------ 💬 채팅 만들기 ------------
      socket.emit(
        'new_message1',
        { name: 'client', message: 'server 접속' },
        (arg) => {
          console.log(arg);
        }
      );

      const chatForm = document.querySelector('#chat');
      const user = chatForm.querySelector('#user');
      const message = chatForm.querySelector('#message');
      const ul = document.querySelector('ul');

      chatForm.addEventListener('submit', (e) => {
        e.preventDefault();

        // [ver1] 나의 메시지가 나에게만 보임
        socket.emit(
          'new_message1',
          {
            name: user.value,
            message: message.value,
          },
          (data) => {
            // data : {name: String, message: String}
            const li = document.createElement('li');
            li.textContent = `${data.name} : ${data.message}`;
            ul.append(li);
            li.style.color = 'red';
          }
        );

        // [ver2] 나의 메시지가 모두에게 보이도록
        socket.emit('new_message2', {
          name: user.value,
          message: message.value,
        });
      });

      socket.on('message_render', (data) => {
        // data: {name, message}
        const li = document.createElement('li');
        li.textContent = `${data.name} : ${data.message}`;
        ul.append(li);
        li.style.color = 'blue';
      });
    </script>
  </body>
</html>
